/* eslint-disable @next/next/no-img-element */
/**
 * This code was initally generated by v0 by Vercel, but drastically changed
 * @see https://v0.dev/t/TdNZKJoUKO6
 */
import { CardTitle, CardHeader, CardContent, Card } from "@/components/ui/card"
import { WeatherForecast } from "@/lib/weather"

export function Weather(props: { forecast: WeatherForecast, zipcode: string }) {

  const groupedForecast = groupForecastByDay(props.forecast)

  return (
    <div className="py-12 lg:py-24">
      <div className="container px-4 py-6 mx-auto lg:py-12 lg:px-6 ">
        <h1 className="text-3xl font-bold tracking-tight">5-Day Forecast for {props.forecast.city.name} ({props.zipcode})</h1>
      </div>
      <div className="container grid gap-6 px-4 mx-auto md:grid-cols-2 lg:px-6 xl:grid-cols-3">
        {Object.entries(groupedForecast!).map(([key, hourly], index) => {
          const title = index == 0 ? "Today" : index == 1 ? "Tomorrow" : hourly[0].dayOfWeek
          return (
            <div className="grid gap-4" key={key}>
              <Card>
                <CardHeader>
                  <div className="flex items-center justify-between">
                    <CardTitle>{title}</CardTitle>
                    <h4 className="text-lg font-medium leading-none tracking-tight">{hourly[0].dt_txt.split(' ')[0]}</h4>
                  </div>
                </CardHeader>
                <CardContent>
                  <div className="grid gap-4">
                    {hourly.map(item => (
                      <WeatherRow key={item.dt} value={item}></WeatherRow>
                    ))}
                  </div>
                </CardContent>
              </Card>
            </div>
          )
        }
        )}
      </div>
    </div>
  )
}

const WeatherRow = ({ value }: { value: WeatherListItem }) => {
  console.log("weather row", value)
  return (
    <div className="grid items-center grid-cols-3">
      {/* Not the most elegant way to get the time but it's fine */}
      <div className="flex flex-col">
        <p className="font-medium">{value.dt_txt.split(' ')[1].split(":").slice(0, 2).join(":")}</p>
        <p className="text-sm font-light text-gray-400">{value.weather[0].description}</p>
      </div>
      <p className="text-2xl font-bold text-center">{Math.round(value.main.temp)}Â°F</p>
      <div className="flex flex-col items-end justify-end">
        <img
          src={`https://openweathermap.org/img/wn/${value.weather[0].icon}@2x.png`}
          alt={value.weather[0].main}
          width={50}
          height={50}
        />
      </div>
    </div>
  )
}

type WeatherListItem = WeatherForecast['list'][0] & { dayOfWeek: string }
const groupForecastByDay = (weather: WeatherForecast) => {
  if (!weather) return {};

  return weather.list.reduce<{ [key: string]: WeatherListItem[] }>((groupedForecast, item) => {
    const date = item.dt_txt.split(" ")[0];
    const dayOfWeek = getDayOfWeek(new Date(date).getDay());

    if (!groupedForecast[date]) {
      groupedForecast[date] = [];
    }

    groupedForecast[date].push({ ...item, dayOfWeek });
    return groupedForecast
  }, {});

};

const getDayOfWeek = (dayIndex: number): string => {
  const days = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];
  return days[dayIndex];
};
