/* eslint-disable @next/next/no-img-element */
/**
 * This code was initally generated by v0 by Vercel, but drastically changed
 * @see https://v0.dev/t/TdNZKJoUKO6
 */
import { CardTitle, CardHeader, CardContent, Card } from "@/components/ui/card"
import { WeatherForecast } from "@/lib/weather"

export function Weather(props: { forecast: WeatherForecast, zipcode: string }) {

  const groupedForecast = groupForecastByDay(props.forecast)

  return (
    <div className="py-12 lg:py-24">
      <div className="container px-4 py-6 mx-auto lg:py-12 lg:px-6 ">
        <h1 className="text-3xl font-bold tracking-tight">5-Day Forecast for {props.forecast.city.name} ({props.zipcode})</h1>
      </div>
      <div className="container grid gap-6 px-4 mx-auto md:grid-cols-2 lg:px-6 xl:grid-cols-3">
        {Object.entries(groupedForecast!).map(([key, hourly], index) => {
          const title = index == 0 ? "Today" : index == 1 ? "Tomorrow" : hourly[0].dayOfWeek
          return (
            <div className="grid gap-4" key={key}>
              <Card>
                <CardHeader>
                  <div className="flex items-center justify-between">
                    <CardTitle>{title}</CardTitle>
                    <h4 className="text-lg font-medium leading-none tracking-tight">
                      {index <= 1 ? `${hourly[0].dayOfWeek.substring(0, 3)} ` : ''}
                      {hourly[0].dt_txt}
                    </h4>
                  </div>
                </CardHeader>
                <CardContent>
                  <div className="grid gap-4">
                    {hourly.map(item => (
                      <WeatherRow key={item.dt} value={item}></WeatherRow>
                    ))}
                  </div>
                </CardContent>
              </Card>
            </div>
          )
        }
        )}
      </div>
    </div>
  )
}

const WeatherRow = ({ value }: { value: WeatherListItem }) => {
  return (
    <div className="grid items-center grid-cols-3">
      {/* Not the most elegant way to get the time but it's fine */}
      <div className="flex flex-col">
        <p className="text-lg font-medium">{value.hourString}</p>
        <p className="text-sm font-light text-gray-400 capitalize">{value.weather[0].description}</p>
      </div>
      <p className="text-2xl font-bold text-center">{Math.round(value.main.temp)}Â°F</p>
      <div className="flex flex-col items-end justify-end">
        <img
          src={`https://openweathermap.org/img/wn/${value.weather[0].icon}@2x.png`}
          alt={value.weather[0].main}
          width={50}
          height={50}
        />
      </div>
    </div>
  )
}

type WeatherListItem = WeatherForecast['list'][0] & { dayOfWeek: string, hourString: string }
const groupForecastByDay = (weather: WeatherForecast) => {
  if (!weather) return {};

  const offset = weather.city.timezone

  return weather.list.reduce<{ [key: string]: WeatherListItem[] }>((groupedForecast, item) => {
    // adjust the UTC unix date to the city's local time, stored as # of seconds offset
    const dateObj = new Date((item.dt + offset) * 1000)

    // use the UTC date since we already adjusted for local time above
    const year = dateObj.getUTCFullYear();
    const month = String(dateObj.getUTCMonth() + 1).padStart(2, '0'); // Month is zero-based
    const day = String(dateObj.getUTCDate()).padStart(2, '0');
    const dayOfWeek = getDayOfWeek(dateObj.getUTCDay());

    const intlDate = `${year}-${month}-${day}`;

    const hourString = getHourString(dateObj)

    // overwrite the API's formatted with the preferred display 
    item.dt_txt = `${month}/${day}`

    if (!groupedForecast[intlDate]) {
      groupedForecast[intlDate] = [];
    }

    groupedForecast[intlDate].push({ ...item, dayOfWeek, hourString });

    return groupedForecast
  }, {});

};

// Generated with ChatGPT
// Prompt: "I have a JS Date object, how can I output in `HH:MM am/pm` format?" 
const getHourString = (dateObj: Date) => {
  const hours = dateObj.getUTCHours();
  const minutes = String(dateObj.getUTCMinutes()).padStart(2, '0');

  let amOrPm = 'am';
  let formattedHours = hours;
  if (hours > 12) {
    formattedHours = hours - 12;
    amOrPm = 'pm';
  } else if (hours === 0) {
    formattedHours = 12;
  }

  return `${formattedHours}:${minutes} ${amOrPm}`;
}

const getDayOfWeek = (dayIndex: number): string => {
  const days = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];
  return days[dayIndex];
};
